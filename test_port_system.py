#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
"""

import json
import os
import sys
import time
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from port_manager import port_manager
from xray_config_manager import xray_config_manager
from port_traffic_monitor import port_traffic_monitor

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000"
API_KEY = os.getenv("VPN_API_KEY")
if not API_KEY:
    raise ValueError("VPN_API_KEY environment variable is required")

def make_api_request(endpoint, method="GET", data=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    headers = {
        "X-API-Key": API_KEY,
        "Content-Type": "application/json"
    }
    
    url = f"{API_BASE_URL}{endpoint}"
    
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, timeout=10)
        elif method == "POST":
            response = requests.post(url, headers=headers, json=data, timeout=10)
        elif method == "DELETE":
            response = requests.delete(url, headers=headers, timeout=10)
        else:
            raise ValueError(f"Unsupported method: {method}")
        
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå API request failed: {e}")
        return None

def test_port_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç–æ–≤"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    port = port_manager.get_available_port()
    if port:
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç: {port}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç")
        return False
    
    # –¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    test_uuid = "test-uuid-123"
    test_key_id = "test-key-123"
    test_name = "Test Key"
    
    assigned_port = port_manager.assign_port(test_uuid, test_key_id, test_name)
    if assigned_port:
        print(f"‚úÖ –ü–æ—Ä—Ç {assigned_port} –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è {test_name}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Ä—Ç")
        return False
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ –¥–ª—è UUID
    retrieved_port = port_manager.get_port_for_uuid(test_uuid)
    if retrieved_port == assigned_port:
        print(f"‚úÖ –ü–æ—Ä—Ç {retrieved_port} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è UUID")
    else:
        print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Ä—Ç–æ–≤: {retrieved_port} != {assigned_port}")
        return False
    
    # –¢–µ—Å—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    if port_manager.release_port(test_uuid):
        print("‚úÖ –ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç")
        return False
    
    print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_xray_config_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray"""
    print("‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_status = xray_config_manager.get_config_status()
    if "error" not in config_status:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω: {config_status.get('vless_inbounds', 0)} inbounds")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {config_status['error']}")
        return False
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è inbound –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_uuid = "test-config-uuid"
    test_name = "Test Config Key"
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    port_manager.assign_port(test_uuid, "test-config-key-id", test_name)
    
    inbound = xray_config_manager.create_inbound_for_key(test_uuid, test_name)
    if inbound:
        print(f"‚úÖ Inbound –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ {inbound['port']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        required_fields = ["port", "protocol", "settings", "streamSettings"]
        for field in required_fields:
            if field in inbound:
                print(f"   ‚úÖ –ü–æ–ª–µ {field} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å inbound –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return False
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    port_manager.release_port(test_uuid)
    
    print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_port_traffic_monitor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å–≤–æ–¥–∫–∏
    system_summary = port_traffic_monitor.get_system_traffic_summary()
    if "error" not in system_summary:
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {system_summary.get('active_ports', 0)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å–≤–æ–¥–∫–∏: {system_summary['error']}")
        return False
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤
    all_traffic = port_traffic_monitor.get_all_ports_traffic()
    if "error" not in all_traffic:
        print(f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω: {all_traffic.get('total_ports', 0)} –ø–æ—Ä—Ç–æ–≤")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤: {all_traffic['error']}")
        return False
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    test_port = 10001
    port_traffic = port_traffic_monitor.get_port_traffic(test_port)
    if "error" not in port_traffic:
        print(f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ –ø–æ—Ä—Ç–∞ {test_port} –ø–æ–ª—É—á–µ–Ω: {port_traffic.get('total_bytes', 0)} –±–∞–π—Ç")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç–∞: {port_traffic['error']}")
        return False
    
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ä—Ç–æ–≤
    ports_status = make_api_request("/api/system/ports")
    if ports_status:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω: {ports_status.get('used_ports', 0)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤")
        return False
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å–≤–æ–¥–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
    traffic_summary = make_api_request("/api/system/traffic/summary")
    if traffic_summary:
        print("‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å–≤–æ–¥–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞")
        return False
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray
    xray_status = make_api_request("/api/system/xray/config-status")
    if xray_status:
        print("‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray –ø–æ–ª—É—á–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray")
        return False
    
    print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_key_creation_and_deletion():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π"""
    print("üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
    test_key_data = {"name": f"Test Key {int(time.time())}"}
    new_key = make_api_request("/api/keys", method="POST", data=test_key_data)
    
    if new_key and "id" in new_key:
        print(f"‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω: {new_key['name']} (–ø–æ—Ä—Ç: {new_key.get('port', 'N/A')})")
        key_id = new_key["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
        keys_list = make_api_request("/api/keys")
        if keys_list:
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ–ª—É—á–µ–Ω: {len(keys_list)} –∫–ª—é—á–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫ –∫–ª—é—á–∞ –ø–æ –ø–æ—Ä—Ç—É
        port_traffic = make_api_request(f"/api/keys/{key_id}/traffic/port/exact")
        if port_traffic:
            print("‚úÖ –¢—Ä–∞—Ñ–∏–∫ –∫–ª—é—á–∞ –ø–æ –ø–æ—Ä—Ç—É –ø–æ–ª—É—á–µ–Ω")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
        delete_result = make_api_request(f"/api/keys/{key_id}", method="DELETE")
        if delete_result:
            print("‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á")
            return False
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á")
        return False
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –° –ü–û–†–¢–ê–ú–ò")
    print("=" * 50)
    
    tests = [
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç–æ–≤", test_port_manager),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray", test_xray_config_manager),
        ("–ú–æ–Ω–∏—Ç–æ—Ä —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤", test_port_traffic_monitor),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", test_api_endpoints),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π", test_key_creation_and_deletion)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                failed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {failed} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_all_tests()
    
    if success:
        print("\nüéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Xray —Å–µ—Ä–≤–∏—Å–∞")
        print("   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print("   - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å —Ç—Ä–∞—Ñ–∏–∫–∞")
    else:
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê!")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
        print("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Xray")
        print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–æ–≤")
    
    return success

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 