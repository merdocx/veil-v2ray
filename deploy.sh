#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è VPN —Å–µ—Ä–≤–µ—Ä–∞
# –í–µ—Ä—Å–∏—è: 2.1.1
# –î–∞—Ç–∞: 5 –∞–≤–≥—É—Å—Ç–∞ 2025

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∞–≤
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
check_os() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
        exit 1
    fi
    
    log_success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS $VER"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        apt update && apt upgrade -y
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"Red Hat"* ]]; then
        yum update -y
    else
        log_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    fi
    
    log_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        apt install -y git curl wget python3 python3-pip python3-venv nginx certbot python3-certbot-nginx unzip
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"Red Hat"* ]]; then
        yum install -y git curl wget python3 python3-pip nginx certbot python3-certbot-nginx unzip
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray
install_xray() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray-core..."
    
    cd /usr/local/bin
    wget -O xray.zip https://github.com/XTLS/Xray-core/releases/download/v1.8.7/Xray-linux-64.zip
    unzip -o xray.zip
    chmod +x xray
    rm xray.zip
    
    log_success "Xray —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
clone_project() {
    log_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    cd /root
    if [[ -d "vpn-server" ]]; then
        log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è vpn-server —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º..."
        rm -rf vpn-server
    fi
    
    git clone https://github.com/merdocx/veil-v2ray.git vpn-server
    cd vpn-server
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    LATEST_TAG=$(git tag -l | tail -1)
    log_success "–ü—Ä–æ–µ–∫—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω, –≤–µ—Ä—Å–∏—è: $LATEST_TAG"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_python() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    cd /root/vpn-server
    python3 -m venv venv
    source venv/bin/activate
    pip install fastapi uvicorn[standard] pydantic python-multipart
    
    log_success "Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    cd /root/vpn-server
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    cat > .env << 'EOF'
VPN_API_KEY=your-secret-api-key-here
VPN_HOST=0.0.0.0
VPN_PORT=8000
VPN_ENABLE_HTTPS=true
VPN_SSL_CERT_PATH=/etc/ssl/certs/vpn-api.crt
VPN_SSL_KEY_PATH=/etc/ssl/private/vpn-api.key
EOF
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞
    python3 generate_api_key.py
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray
    cp config/config.example.json config/config.json
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
create_ssl() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    mkdir -p /etc/ssl/certs /etc/ssl/private
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/ssl/private/vpn-api.key \
        -out /etc/ssl/certs/vpn-api.crt \
        -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"
    
    log_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
setup_nginx() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > /etc/nginx/sites-available/vpn-api << 'EOF'
server {
    listen 443 ssl http2;
    server_name _;

    ssl_certificate /etc/ssl/certs/vpn-api.crt;
    ssl_certificate_key /etc/ssl/private/vpn-api.key;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 80;
    server_name _;
    return 301 https://$server_name$request_uri;
}
EOF
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ln -sf /etc/nginx/sites-available/vpn-api /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    nginx -t
    
    log_success "Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤
create_services() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # VPN API —Å–µ—Ä–≤–∏—Å
    cat > /etc/systemd/system/vpn-api.service << 'EOF'
[Unit]
Description=VPN Key Management API
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/root/vpn-server
Environment=PATH=/root/vpn-server/venv/bin:/usr/local/bin:/usr/bin:/bin
ExecStart=/root/vpn-server/venv/bin/python /root/vpn-server/api.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    
    # Xray —Å–µ—Ä–≤–∏—Å
    cat > /etc/systemd/system/xray.service << 'EOF'
[Unit]
Description=Xray Service
Documentation=https://github.com/xtls
After=network.target nss-lookup.target

[Service]
User=root
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
ExecStart=/usr/local/bin/xray run -config /root/vpn-server/config/config.json
Restart=on-failure
RestartPreventExitStatus=23
LimitNPROC=10000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF
    
    log_success "Systemd —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_firewall() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    if command -v ufw &> /dev/null; then
        ufw allow 22/tcp
        ufw allow 80/tcp
        ufw allow 443/tcp
        ufw allow 8000/tcp
        ufw allow 10001:10020/tcp
        ufw --force enable
        log_success "UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        # iptables
        iptables -A INPUT -p tcp --dport 22 -j ACCEPT
        iptables -A INPUT -p tcp --dport 80 -j ACCEPT
        iptables -A INPUT -p tcp --dport 443 -j ACCEPT
        iptables -A INPUT -p tcp --dport 8000 -j ACCEPT
        iptables -A INPUT -p tcp --dport 10001:10020 -j ACCEPT
        log_success "iptables –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    systemctl daemon-reload
    
    systemctl enable vpn-api
    systemctl enable xray
    systemctl enable nginx
    
    systemctl start vpn-api
    systemctl start xray
    systemctl start nginx
    
    log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
check_deployment() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    if systemctl is-active --quiet vpn-api; then
        log_success "VPN API —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "VPN API —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 1
    fi
    
    if systemctl is-active --quiet xray; then
        log_success "Xray —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "Xray —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 1
    fi
    
    if systemctl is-active --quiet nginx; then
        log_success "Nginx —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "Nginx —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    if netstat -tlnp | grep -q ":8000"; then
        log_success "–ü–æ—Ä—Ç 8000 (API) –æ—Ç–∫—Ä—ã—Ç"
    else
        log_error "–ü–æ—Ä—Ç 8000 (API) –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
        return 1
    fi
    
    if netstat -tlnp | grep -q ":443"; then
        log_success "–ü–æ—Ä—Ç 443 (HTTPS) –æ—Ç–∫—Ä—ã—Ç"
    else
        log_error "–ü–æ—Ä—Ç 443 (HTTPS) –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
        return 1
    fi
    
    log_success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_info() {
    echo ""
    echo "=========================================="
    echo "üöÄ VPN —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
    echo "=========================================="
    echo ""
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:"
    echo "   ‚Ä¢ API URL: https://$(hostname -I | awk '{print $1}'):8000"
    echo "   ‚Ä¢ Nginx URL: https://$(hostname -I | awk '{print $1}')"
    echo "   ‚Ä¢ –í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $(cd /root/vpn-server && git tag -l | tail -1)"
    echo ""
    echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤: systemctl status vpn-api xray nginx"
    echo "   ‚Ä¢ –õ–æ–≥–∏ API: journalctl -u vpn-api -f"
    echo "   ‚Ä¢ –õ–æ–≥–∏ Xray: journalctl -u xray -f"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ API: curl -k https://localhost:8000/api/"
    echo ""
    echo "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:"
    echo "   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ /root/vpn-server/.env"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –¥–æ–º–µ–Ω–∞"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ fail2ban –¥–ª—è –∑–∞—â–∏—Ç—ã"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "   ‚Ä¢ /root/vpn-server/README.md"
    echo "   ‚Ä¢ /root/vpn-server/DEPLOYMENT_GUIDE.md"
    echo ""
    echo "=========================================="
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ VPN —Å–µ—Ä–≤–µ—Ä–∞..."
    echo ""
    
    check_root
    check_os
    update_system
    install_dependencies
    install_xray
    clone_project
    setup_python
    create_config
    create_ssl
    setup_nginx
    create_services
    setup_firewall
    start_services
    check_deployment
    show_info
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 