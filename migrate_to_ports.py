#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
"""

import json
import os
import sys
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from port_manager import port_manager
from xray_config_manager import xray_config_manager
from port_traffic_monitor import port_traffic_monitor

def load_keys():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    keys_file = "/root/vpn-server/config/keys.json"
    if not os.path.exists(keys_file):
        return []
    
    with open(keys_file, 'r') as f:
        return json.load(f)

def save_keys(keys):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª"""
    keys_file = "/root/vpn-server/config/keys.json"
    with open(keys_file, 'w') as f:
        json.dump(keys, f, indent=2)

def backup_keys():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π"""
    keys_file = "/root/vpn-server/config/keys.json"
    if not os.path.exists(keys_file):
        return None
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"/root/vpn-server/config/keys_backup_{timestamp}.json"
    
    with open(keys_file, 'r') as src:
        with open(backup_file, 'w') as dst:
            dst.write(src.read())
    
    return backup_file

def migrate_keys_to_ports():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ—Ä—Ç–∞–º–∏"""
    print("=== –ú–ò–ì–†–ê–¶–ò–Ø –ö–õ–Æ–ß–ï–ô –ù–ê –°–ò–°–¢–ï–ú–£ –° –ü–û–†–¢–ê–ú–ò ===")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = backup_keys()
    if backup_file:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    else:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    keys = load_keys()
    if not keys:
        print("‚ÑπÔ∏è  –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        return True
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Ä—Ç–æ–≤
    if len(keys) > 20:
        print("‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –ø–æ—Ä—Ç–æ–≤ (20)")
        return False
    
    migrated_count = 0
    failed_count = 0
    
    for i, key in enumerate(keys, 1):
        print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ {i}/{len(keys)}: {key['name']} ({key['uuid'][:8]}...)")
        
        try:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è –∫–ª—é—á–∞
            assigned_port = port_manager.assign_port(
                key["uuid"], 
                key["id"], 
                key["name"]
            )
            
            if not assigned_port:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Ä—Ç –¥–ª—è –∫–ª—é—á–∞ {key['name']}")
                failed_count += 1
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç –≤ –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
            key["port"] = assigned_port
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Xray
            if not xray_config_manager.add_key_to_config(key["uuid"], key["name"]):
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á {key['name']} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Xray")
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
                port_manager.release_port(key["uuid"])
                failed_count += 1
                continue
            
            print(f"‚úÖ –ö–ª—é—á {key['name']} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ—Ä—Ç {assigned_port}")
            migrated_count += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ {key['name']}: {e}")
            failed_count += 1
    
    print()
    print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò ===")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    print(f"üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {len(keys)}")
    
    if migrated_count > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        save_keys(keys)
        print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤
        print()
        print("=== –°–¢–ê–¢–£–° –ü–û–†–¢–û–í ===")
        port_assignments = port_manager.get_all_assignments()
        used_count = port_manager.get_used_ports_count()
        available_count = port_manager.get_available_ports_count()
        
        print(f"üîå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ—Ä—Ç–æ–≤: {used_count}")
        print(f"üîì –°–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤: {available_count}")
        print(f"üìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤:")
        
        for uuid, assignment in port_assignments["port_assignments"].items():
            print(f"   –ü–æ—Ä—Ç {assignment['port']} ‚Üí {assignment['key_name']} ({uuid[:8]}...)")
    
    return failed_count == 0

def validate_migration():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print()
    print("=== –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    keys = load_keys()
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    port_assignments = port_manager.get_all_assignments()
    print(f"üîå –ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {len(port_assignments['port_assignments'])}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    keys_with_ports = [k for k in keys if k.get("port")]
    print(f"üîó –ö–ª—é—á–µ–π —Å –ø–æ—Ä—Ç–∞–º–∏: {len(keys_with_ports)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Xray
    config_status = xray_config_manager.get_config_status()
    print(f"‚öôÔ∏è  Inbounds –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_status.get('vless_inbounds', 0)}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Ä—Ç–æ–≤
    validation = port_manager.validate_port_assignments()
    if validation["valid"]:
        print("‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ—Ä—Ç–æ–≤:")
        for issue in validation["issues"]:
            print(f"   - {issue}")
    
    return validation["valid"]

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    keys = load_keys()
    print(f"   –ö–ª—é—á–µ–π: {len(keys)}")
    
    port_assignments = port_manager.get_all_assignments()
    print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {len(port_assignments['port_assignments'])}")
    
    if len(port_assignments["port_assignments"]) > 0:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
    
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrate_keys_to_ports()
    
    if success:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        validation_success = validate_migration()
        
        if validation_success:
            print()
            print("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Xray —Å–µ—Ä–≤–∏—Å")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API")
            print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ç–æ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞")
        else:
            print()
            print("‚ö†Ô∏è  –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é")
    else:
        print()
        print("‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
    
    return success

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 