#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ç–æ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
"""

import json
import time
import requests
import subprocess
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000"
API_KEY = os.getenv("VPN_API_KEY")
if not API_KEY:
    raise ValueError("VPN_API_KEY environment variable is required")

def make_api_request(endpoint, method="GET", data=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    headers = {
        "X-API-Key": API_KEY,
        "Content-Type": "application/json"
    }
    
    url = f"{API_BASE_URL}{endpoint}"
    
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, timeout=10)
        elif method == "POST":
            response = requests.post(url, headers=headers, json=data, timeout=10)
        elif method == "DELETE":
            response = requests.delete(url, headers=headers, timeout=10)
        else:
            raise ValueError(f"Unsupported method: {method}")
        
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå API request failed: {e}")
        return None

def print_section(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def print_subsection(title):
    """–ü–µ—á–∞—Ç—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print(f"\nüìã {title}")
    print("-" * 40)

def demo_system_overview():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–∑–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print_section("–û–ë–ó–û–† –°–ò–°–¢–ï–ú–´ –¢–û–ß–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¢–†–ê–§–ò–ö–ê")
    
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")
    print("   –ø—É—Ç–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ VPN –∫–ª—é—á–∞")
    print()
    print("üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
    print("   –ö–ª–∏–µ–Ω—Ç 1 ‚Üí –ü–æ—Ä—Ç 10001 ‚Üí Xray ‚Üí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç")
    print("   –ö–ª–∏–µ–Ω—Ç 2 ‚Üí –ü–æ—Ä—Ç 10002 ‚Üí Xray ‚Üí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç")
    print("   ...")
    print("   –ö–ª–∏–µ–Ω—Ç N ‚Üí –ü–æ—Ä—Ç 1000N ‚Üí Xray ‚Üí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç")
    print()
    print("üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print("   ‚úÖ 100% —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")
    print("   ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   ‚úÖ –£–ø—Ä–æ—â–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
    print("   ‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–æ 20 –∫–ª—é—á–µ–π")

def demo_port_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏"""
    print_subsection("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–ê–ú–ò")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤
    ports_status = make_api_request("/api/system/ports")
    if ports_status:
        print(f"üîå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ—Ä—Ç–æ–≤: {ports_status['used_ports']}")
        print(f"üîì –°–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤: {ports_status['available_ports']}")
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ä—Ç–æ–≤: {ports_status['max_ports']}")
        print(f"üéØ –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤: {ports_status['port_range']}")
        
        if ports_status['port_assignments']['port_assignments']:
            print("\nüìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤:")
            for uuid, assignment in ports_status['port_assignments']['port_assignments'].items():
                print(f"   –ü–æ—Ä—Ç {assignment['port']} ‚Üí {assignment['key_name']} ({uuid[:8]}...)")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤")

def demo_traffic_monitoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    print_subsection("–ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–†–ê–§–ò–ö–ê")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
    traffic_data = make_api_request("/api/traffic/ports/exact")
    if traffic_data:
        ports_traffic = traffic_data['ports_traffic']
        system_summary = traffic_data['system_summary']
        
        print(f"üìä –í—Å–µ–≥–æ –ø–æ—Ä—Ç–æ–≤: {ports_traffic['total_ports']}")
        print(f"üîó –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {ports_traffic['total_connections']}")
        print(f"üìà –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {ports_traffic['total_traffic_formatted']}")
        print(f"üåê –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫: {system_summary['total_system_traffic_formatted']}")
        
        if ports_traffic['ports_traffic']:
            print("\nüìã –¢—Ä–∞—Ñ–∏–∫ –ø–æ –ø–æ—Ä—Ç–∞–º:")
            for uuid, port_data in ports_traffic['ports_traffic'].items():
                traffic = port_data['traffic']
                print(f"   –ü–æ—Ä—Ç {port_data['port']} ({port_data['key_name']}):")
                print(f"     üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {traffic['connections']}")
                print(f"     üìä –¢—Ä–∞—Ñ–∏–∫: {traffic['total_formatted']}")
                print(f"     ‚¨áÔ∏è  RX: {traffic['rx_formatted']}")
                print(f"     ‚¨ÜÔ∏è  TX: {traffic['tx_formatted']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Ñ–∏–∫–∞")

def demo_xray_configuration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray"""
    print_subsection("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø XRAY")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_status = make_api_request("/api/system/xray/config-status")
    if config_status:
        status = config_status['config_status']
        print(f"‚öôÔ∏è  –í—Å–µ–≥–æ inbounds: {status['total_inbounds']}")
        print(f"üîå VLESS inbounds: {status['vless_inbounds']}")
        print(f"üåê API inbounds: {status['api_inbounds']}")
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {status['config_valid']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤:")
        try:
            result = subprocess.run(['ss', '-tuln'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if ':1000' in line and 'LISTEN' in line:
                        print(f"   ‚úÖ {line.strip()}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤: {e}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

def demo_key_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–ª—é—á–∞–º–∏"""
    print_subsection("–û–ü–ï–†–ê–¶–ò–ò –° –ö–õ–Æ–ß–ê–ú–ò")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
    keys = make_api_request("/api/keys")
    if keys:
        print(f"üîë –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {len(keys)}")
        print("\nüìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:")
        for key in keys:
            print(f"   {key['name']}:")
            print(f"     üÜî ID: {key['id'][:8]}...")
            print(f"     üîë UUID: {key['uuid'][:8]}...")
            print(f"     üîå –ü–æ—Ä—Ç: {key.get('port', 'N/A')}")
            print(f"     üìÖ –°–æ–∑–¥–∞–Ω: {key['created_at'][:19]}")
            print(f"     ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {key['is_active']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π")

def demo_system_health():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    print_subsection("–°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å–≤–æ–¥–∫—É
    system_summary = make_api_request("/api/system/traffic/summary")
    if system_summary:
        summary = system_summary['summary']
        print(f"üåê –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫: {summary['total_system_traffic_formatted']}")
        print(f"üîå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤: {summary['active_ports']}")
        
        if summary['interface_summary']:
            print("\nüìä –¢—Ä–∞—Ñ–∏–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:")
            for interface, data in summary['interface_summary'].items():
                print(f"   {interface}:")
                print(f"     ‚¨áÔ∏è  RX: {data['rx_formatted']}")
                print(f"     ‚¨ÜÔ∏è  TX: {data['tx_formatted']}")
                print(f"     üìä –û–±—â–∏–π: {data['total_formatted']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å–≤–æ–¥–∫—É")

def demo_accuracy_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    print_subsection("–°–†–ê–í–ù–ï–ù–ò–ï –¢–û–ß–ù–û–°–¢–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print()
    print("üî¥ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ (–æ–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç):")
    print("   ‚ùå –¢–æ—á–Ω–æ—Å—Ç—å: ~80-85%")
    print("   ‚ùå –ù–µ—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   ‚ùå –°–ª–æ–∂–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    print("   ‚ùå –ù–µ—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print()
    print("üü¢ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã):")
    print("   ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å: 100%")
    print("   ‚úÖ –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    print("   ‚úÖ –¢–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º")
    print()
    print("üìà –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: +15-20%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –¢–û–ß–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¢–†–ê–§–ò–ö–ê")
    print("=" * 70)
    print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê API: {API_BASE_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return
    except requests.exceptions.RequestException as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_system_overview()
    demo_port_management()
    demo_traffic_monitoring()
    demo_xray_configuration()
    demo_key_operations()
    demo_system_health()
    demo_accuracy_comparison()
    
    print_section("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ç–æ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print()
    print("üìù –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
    print("   ‚úÖ 100% —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")
    print("   ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞")
    print("   ‚úÖ –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º")
    print("   ‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–æ 20 –∫–ª—é—á–µ–π")
    print()
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}") 