#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ VPN API
"""

import os
import subprocess
import requests
import json
from datetime import datetime

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env...")
    
    env_file = "/root/vpn-server/.env"
    if not os.path.exists(env_file):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    stat = os.stat(env_file)
    if stat.st_mode & 0o777 != 0o600:
        print(f"‚ö†Ô∏è  –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ .env: {oct(stat.st_mode & 0o777)}")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: chmod 600 .env")
    else:
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ .env")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    with open(env_file, 'r') as f:
        content = f.read()
        if 'VPN_API_KEY=' in content:
            print("‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ .env")
            return True
        else:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return False

def check_ssl_certificates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    
    cert_file = "/etc/ssl/certs/vpn-api.crt"
    key_file = "/etc/ssl/private/vpn-api.key"
    
    if not os.path.exists(cert_file):
        print("‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not os.path.exists(key_file):
        print("‚ùå SSL –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    cert_stat = os.stat(cert_file)
    key_stat = os.stat(key_file)
    
    if cert_stat.st_mode & 0o777 != 0o644:
        print(f"‚ö†Ô∏è  –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É: {oct(cert_stat.st_mode & 0o777)}")
    else:
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É")
    
    if key_stat.st_mode & 0o777 != 0o600:
        print(f"‚ö†Ô∏è  –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É: {oct(key_stat.st_mode & 0o777)}")
    else:
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É")
    
    print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def check_api_https():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS API"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π HTTPS
        response = requests.get(
            "https://localhost:8000/api/keys",
            headers={"X-API-Key": os.getenv("VPN_API_KEY")},
            verify=False,
            timeout=5
        )
        
        if response.status_code == 200:
            print("‚úÖ HTTPS API —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ")
        else:
            print(f"‚ö†Ô∏è  HTTPS API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTPS API: {e}")
        return False
    
    return True

def check_nginx_https():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx HTTPS"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx HTTPS...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–π HTTPS —á–µ—Ä–µ–∑ Nginx
        response = requests.get(
            "https://veil-bird.ru/api/keys",
            headers={"X-API-Key": os.getenv("VPN_API_KEY")},
            verify=False,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Nginx HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ö†Ô∏è  Nginx HTTPS –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Nginx HTTPS: {e}")
        return False
    
    return True

def check_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    services = ['vpn-api', 'nginx', 'xray']
    all_active = True
    
    for service in services:
        try:
            result = subprocess.run(
                ['systemctl', 'is-active', service],
                capture_output=True,
                text=True,
                timeout=5
            )
            
            if result.returncode == 0 and result.stdout.strip() == 'active':
                print(f"‚úÖ –°–µ—Ä–≤–∏—Å {service} –∞–∫—Ç–∏–≤–µ–Ω")
            else:
                print(f"‚ùå –°–µ—Ä–≤–∏—Å {service} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                all_active = False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service}: {e}")
            all_active = False
    
    return all_active

def check_ports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤...")
    
    try:
        result = subprocess.run(
            ['netstat', '-tlnp'],
            capture_output=True,
            text=True,
            timeout=5
        )
        
        if result.returncode == 0:
            lines = result.stdout.split('\n')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã API
            api_ports = ['8000', '443', '80']
            all_ports_open = True
            
            for port in api_ports:
                found = False
                for line in lines:
                    if f':{port}' in line:
                        found = True
                        print(f"‚úÖ –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç: {line.split()[-1]}")
                        break
                
                if not found:
                    print(f"‚ö†Ô∏è  –ü–æ—Ä—Ç {port} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    all_ports_open = False
            
            return all_ports_open
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è netstat")
            return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def main():
    print("üîí –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò VPN API")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_file = "/root/vpn-server/.env"
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        check_env_file,
        check_ssl_certificates,
        check_api_https,
        check_nginx_https,
        check_services,
        check_ports
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result if result is not None else False)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")

if __name__ == "__main__":
    main() 